#+TITLE: Emacs Init
#+AUTHOR: William Denton
#+EMAIL: wtd@pobox.com

# #+property: header-args:emacs-lisp :tangle yes :cache yes :results silent
# #+property: header-args:shell :tangle "setup.sh"
#+property: header-args :tangle yes :cache yes :results silent

#+options: num:nil toc:nil ^:nil
#+startup: fold

# Need to fancy up the LaTeX export so I can read it all like an article.

#+latex_class_options: [10pt]

#+latex_header: \usepackage[T1]{fontenc}

#+latex_header: \usepackage[english]{babel} % English language/hyphenation
#+latex_header: \usepackage[osf]{Baskervaldx}

#+latex_header: \usepackage[activate={true,nocompatibility},final,tracking=true,kerning=true,spacing=true,factor=1100,stretch=10,shrink=10]{microtype}
#+latex_header: \microtypecontext{spacing=nonfrench}

#+latex_header: \usepackage{ccicons}

#+latex_header: \usepackage[margin=2cm]{geometry}

#+latex_header: \usepackage{enumitem}
#+latex_header: \setlist{noitemsep}

#+latex_header: \hypersetup{colorlinks=true,urlcolor=blue,linkcolor=blue,pdfborder={0 0 0}}

# Should I stop using projectile, and use Emacs built-in project stuff,
# like C-x p p?

* Commentary

In March 2021 I moved my Emacs config into an Org file, but did it in bulk, so many small comments are yet to be done.  I'll expand all this as I refine it.

** Using Org for Emacs management

Diego Zamboni's [[https://leanpub.com/lit-config/read][Literate Configuration]] is relevant and I should read it.

Org inits I looked at:

+ [[https://github.com/sachac/.emacs.d][Sacha Chua]]
+ [[https://github.com/theophilusx/emacs-init-org/][Tim Cross]]
+ [[https://github.com/dieggsy/dotfiles/tree/master/emacs/.emacs.d][Diego]]
+ [[https://github.com/thblt/.emacs.d][Thibault Polge]]
+ [[https://github.com/novoid/dot-emacs][Karl Voit]]
+ [[https://gitlab.com/marcowahl/mw.emacs.d][Marco Wahl]]
+ [[https://github.com/zzamboni/dot-emacs/][Diego Zamboni]]
+ [[https://github.com/tecosaur/emacs-config][tecosaur]]

** To try?

+ Sacha Chua's [[https://github.com/sachac/subed][subed]] for editing video subtitles

* Warning!

#+begin_src emacs-lisp
;; DO NOT EDIT THIS FILE DIRECTLY
;; It is generated from an Org file.
;;
;; You should make any changes there and regenerate it with C-c C-v t
#+end_src

* Early init

The [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][early init file]] "is loaded before the package system and GUI is initialized, so in it you can customize variables that affect frame appearance as well as the package initialization process."

#+begin_src emacs-lisp :tangle early-init.el
;; DO NOT EDIT THIS FILE DIRECTLY
;; It is generated from an Org file.
;;
;; You should make any changes there and regenerate it with C-c C-v t
#+end_src

Turn off these interface features early in startup to avoid momentary display.

#+begin_src emacs-lisp :tangle early-init.el
;; (menu-bar-mode 1)
(tool-bar-mode -1)
(tab-line-mode -1)
;; (scroll-bar-mode 1)
#+end_src

Turn off the startup screen.

#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-startup-message t)
#+end_src

Go full screen!

#+begin_src emacs-lisp :tangle early-init.el
(when (fboundp 'toggle-frame-maximized)
  (toggle-frame-maximized))
#+end_src

I don't have a "file containing site-wide run-time initializations."

#+begin_src emacs-lisp :tangle early-init.el
(setq site-run-file nil)
#+end_src

And finally, don't garbage clean so often.

#+begin_src emacs-lisp :tangle early-init.el
(setq gc-cons-threshold 8000000) ;; 8 MB
#+end_src

Everything from here on is in the regular init file.

* Debugging

Turn on debugging, and change warning levels, as needed.

#+begin_src emacs-lisp :tangle init.el
;; (setq debug-on-error t)
(setq warning-minimum-level :emergency) ;; :emergency, :error, :warning, :debug
#+end_src

For more investigation, this minimal customization (as [[https://orgmode.org/org.html#Feedback][documented in the manual]]) might be necessary.  First, turn on debugging.

#+begin_src emacs-lisp :tangle minimal-init.el
(setq debug-on-error t
      debug-on-signal nil
      debug-on-quit nil)
#+end_src

Then load up Org from where I have it, and tell Org it can run R and shell scripts.

#+begin_src emacs-lisp :tangle minimal-init.el
(add-to-list 'load-path (expand-file-name "/usr/local/src/org-mode/lisp"))

(org-babel-do-load-languages 'org-babel-load-languages '(
     (R . t)
     (shell . t)
     ))
#+end_src

For R, define [[https://ess.r-project.org/Manual/ess.html#Activating-and-Loading-ESS][where ESS is]] (change path as appropriate).

#+begin_src emacs-lisp :tangle minimal-init.el
(add-to-list 'load-path "~/.emacs.d/elpa/ess-20221121.1627") ;;  "/usr/local/src/ESS/lisp"
(require 'ess-r-mode)
#+end_src

Run =emacs -Q -l ~/.emacs.d/minimal-org.el= and take it from there.  See the documentation for how to generate useful backtraces.

* Starting up

# user-emacs-directory is ~/.emacs.d/

** Packages

First, set up the MELPA archive.

#+begin_src emacs-lisp :tangle init.el
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(setq package-archive-priorities '(("melpa" . 20) ("gnu" . 10)))
#+end_src

I use John Wiegley's great [[https://github.com/jwiegley/use-package][use-package]] everywhere I can to handle the packages I want.  It's now a part of core Emacs.  =diminish= and =bind-key= go with it, because I diminish mode line indicators and use =:bind= in places.

#+begin_src emacs-lisp
(require 'use-package)
(use-package diminish)
(use-package bind-key)
#+end_src

If I want a package, install it automatically.

#+begin_src emacs-lisp
(setq use-package-always-ensure t)
#+end_src

** Emacs server

Run the server; now I can load any file into Emacs with ~emacsclient file~ (or, as I have it aliased, ~e file~.)

#+begin_src emacs-lisp
(server-mode)
#+end_src

* Internals and technical stuff

[[http://tsengf.blogspot.ca/2011/06/disable-byte-compile-warning-in-emacs.html][Disable byte-compile warnings]], which I don't care about.

#+begin_src emacs-lisp
(setq byte-compile-warnings '(not nresolved
                                  free-vars
                                  callargs
                                  redefine
                                  obsolete
                                  noruntime
                                  cl-functions
                                  interactive-only
                                  ))
#+end_src

Keep custom settings in separate file.  If =custom.el= doesn't exist, create an empty file (for starting from scratch).

#+begin_src emacs-lisp
(setq custom-file "~/.custom.el")
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))
(load custom-file)
#+end_src

Install [[https://github.com/jwiegley/emacs-async][async]], which some packages need.

#+begin_src emacs-lisp
(use-package async
  :defer t
  :config
  (dired-async-mode 1)
  )
#+end_src

* Help

[[https://github.com/justbur/emacs-which-key][which-key]] "is a minor mode for Emacs that displays the key bindings following your currently entered incomplete command (a prefix) in a popup."  Very handy:  start a command and wait a second and it will show you all the possible completions.

#+begin_src emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config
  (which-key-mode)
  )
#+end_src

* Minor one-line customizations

Sentences do not need double spaces to end.  But it's better when they do, of course.

#+begin_src emacs-lisp
(set-default 'sentence-end-double-space nil)
#+end_src

Calendar weeks start on Monday.

#+begin_src emacs-lisp
(setq calendar-week-start-day 1)
#+end_src

I don't want to type in "yes" or "no"---I want y/n.

#+begin_src emacs-lisp
;; (fset 'yes-or-no-p 'y-or-n-p)
(setq use-short-answers t)
#+end_src

Lower the time to echo keystrokes.

#+begin_src emacs-lisp
(setq echo-keystrokes 0.1)
#+end_src

Never use an X dialog box; use the minibuffer instead.

#+begin_src emacs-lisp
(setq use-dialog-box nil)
#+end_src

* Appearance

** Little tweaks

Proper line wrapping.

#+begin_src emacs-lisp
(global-visual-line-mode 1)
#+end_src

Add a little space (measured in pixels) between lines.

#+begin_src emacs-lisp
(setq-default line-spacing 2)
#+end_src

When selecting a region that wraps from one to the other, don't highlight to the edge of the buffer.

#+begin_src emacs-lisp
(set-face-attribute 'region nil :extend nil)
#+end_src

Subtly highlight the current line.

#+begin_src emacs-lisp
(global-hl-line-mode 1)
;; And set its colour
;; (set-face-background hl-line-face "#efefef")
#+end_src

Small improvement to how underlines are displayed.

#+begin_src emacs-lisp
(setq x-underline-at-descent-line t)
#+end_src

** Window divider

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Window-Dividers.html][Window dividers]] help distinguish windows when the frame is split.  This gives a nice visible line when there's a vertical split.

#+begin_src emacs-lisp
(setq window-divider-default-places 'right-only
      window-divider-default-right-width 1)
(set-face-attribute 'window-divider nil :foreground (face-foreground 'default))
(window-divider-mode +1)
#+end_src

** Pointer

Make the cursor a thin horizontal bar, not a block.  It can be ='bar= or ='box= or ='(hbar . 3)= etc.  I like it blinking so I don't disable =blink-cursor-mode=.

#+begin_src emacs-lisp
(set-default 'cursor-type '(bar . 2))
#+end_src

Change the pointer colour.  Why boring old plain white?

#+begin_src emacs-lisp
(set-cursor-color "DarkGoldenrod")
#+end_src

** Faces and fonts

My home and work machines have different screen resolutions, so the font height needs to be different.  It's measured in 0.1 points, so 130 is 13 pt.  I need it a little bigger on my work machine.

#+begin_src emacs-lisp
(setq wtd-ubuntu-mono-height
      (cond ((string= (system-name) "marcus") 120)
	    ((string= (system-name) "ochre") 150)
	    ((string= (system-name) "work") 160)
	    ((string= (system-name) "helium") 150)
	    (t 120))
      )
#+end_src


I use [[https://en.wikipedia.org/wiki/Ubuntu_(typeface)][Ubuntu]] Mono in Emacs and in terminal windows, so it all looks the same.  I used [[https://en.wikipedia.org/wiki/Fira_(typeface)#Fira_Code][Fira]] Code for a little while, and it was very nice.  Elsewhere I use [[https://en.wikipedia.org/wiki/Baskerville][Baskerville]] as much as possible.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Ubuntu Mono" :height wtd-ubuntu-mono-height)
;; (set-face-attribute 'default nil :font "Fira Code" :height wtd-fira-code-height)
;; (set-face-attribute 'variable-pitch nil :family "Baskervald ADF Std" :height wtd-font-height)
#+end_src

This could help improve performance with Unicode symbols.

#+begin_src emacs-lisp
(setq inhibit-compacting-font-caches t)
#+end_src

Always do font-locking.

#+begin_src emacs-lisp
(setq font-lock-maximum-decoration t)
#+end_src

** Unicode and UTF-8

[[https://github.com/purcell/list-unicode-display][list-unicode-display]] "provides a command which searches for Unicode characters by name, and displays a list of matching characters with their names in a buffer."  Similar to ~C-c 8~ in Counsel, which gives an interactive search for Unicode characters.

#+begin_src emacs-lisp
(use-package list-unicode-display)
#+end_src

UTF-8 everywhere (surely this is overkill?).

#+begin_src emacs-lisp
(set-language-environment "UTF-8")
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src

** Parentheses

Use [[https://github.com/Fuco1/smartparens/][smartparens]] to handle parentheses?  Right now, no.  I'm going to try not having any fancy parentheses (or quote, or whatever) handling, so I have to type it all in myself.

#+begin_src emacs-lisp :tangle no
(use-package smartparens
  :diminish smartparens-mode
  :init
  (require 'smartparens-config)
  :config
  (smartparens-global-mode t)
  (show-smartparens-global-mode t)
  (setq sp-show-pair-from-inside t)
  :custom-face
  (sp-show-pair-match-face ((t (:foreground "White")))) ;; Could also have :background "Colour" in there.
  ;; (sp-show-pair-match-content-face ((t (:foreground "White")))) ;; Highlight all the enclosed content
  (sp-show-pair-mismatch-face ((t (:foreground "Red"))))
  )
#+end_src

I do want a bit of basic help with these, however.  (I wish the blink highlight were more obvious---how can I make it flash reverse, or something like that?)

#+begin_src emacs-lisp
(show-paren-mode t)
(setq blink-matching-paren t)
#+end_src

** Indenting

Tabs have four spaces.  Eight is wrong.

#+begin_src emacs-lisp
(setq tab-width 4)
#+end_src

I don't turn on the built-in =electric-indent-mode= because I use [[https://github.com/Malabarba/aggressive-indent-mode][aggressive-indent-mode]], which is indeed aggressive, but very handy.

#+begin_src emacs-lisp
(use-package aggressive-indent
  :diminish aggressive-indent-mode ;; "→"
  :config
  (global-aggressive-indent-mode 1)
  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  )
#+end_src

I was trying out [[https://github.com/DarthFennec/highlight-indent-guides][highlight-indent-guides]] (after using =indent-guide= before) but I disabled it to see if I miss it.  (Watch out for the ESS hook.)

#+begin_src emacs-lisp :tangle no
(use-package highlight-indent-guides
  :diminish
  :config
  (setq highlight-indent-guides-method 'character
	highlight-indent-guides-character ?\|)
  :hook
  (prog-mode . highlight-indent-guides-mode)
  )
#+end_src

** Solarized theme

Bozhidar Batsov's [[https://github.com/bbatsov/solarized-emacs][Solarized theme for Emacs]] is smooth and easy on the eye.

#+begin_src emacs-lisp
(use-package solarized-theme
  :config
  ;; Stop the theme from messing up Org headlines and using variable pitch everywhere.
  (setq solarized-use-variable-pitch nil
	solarized-scale-org-headlines nil)
  (load-theme 'solarized-dark t)
  )
#+end_src

** Mode line

Include the size of the file in the mode line.

#+begin_src emacs-lisp
(size-indication-mode t)
#+end_src

Also show which column I'm in.

#+begin_src emacs-lisp
(column-number-mode t)
#+end_src

Fancy up the mode line with [[https://github.com/milkypostman/powerline/][powerline]].  Sticking with the default seems to be nice enough for me.

#+begin_src emacs-lisp
(use-package powerline
  :config
  (powerline-default-theme)
  )
#+end_src

I don't like a crowded mode line, and for most modes I don't want it to show the mode is active, so I use ~:diminish~ when packages are installed with ~use-package~.  That doesn't get everything, so I need to specify some here.

#+begin_src emacs-lisp
(diminish 'abbrev-mode)
(diminish 'emacs-lisp-d-mode " Ⓛ")
#+end_src

And here's a list of various other modes I hide a different way.

#+begin_src emacs-lisp
(eval-after-load "autorevert" '(diminish 'auto-revert-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
;; (eval-after-load "flymake" '(diminish 'flymake-mode))
(eval-after-load "flyspell" '(diminish 'flyspell-mode ""))
;;(eval-after-load "magit" '(diminish 'magit-auto-revert-mode))
(eval-after-load "org-indent" '(diminish 'org-indent-mode)) ;; →
(eval-after-load "outline" '(diminish 'outline-minor-mode))
(eval-after-load "rainbow-mode" '(diminish 'rainbow-mode))
(eval-after-load "simple" '(diminish 'visual-line-mode))
(eval-after-load "smerge-mode" '(diminish 'smerge-mode))
(eval-after-load "subword" '(diminish 'subword-mode))
#+end_src

** Prettifying symbols

Use =prettify-symbols-mode= everywhere.

#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
#+end_src

The mode reveals what's really there when the pointer is on the symbol, and this makes it also show the real text when the pointer is just to the right.

#+begin_src emacs-lisp
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+end_src

I don't think I should be setting this variable like this, but there's no other way I can figure out to get prettification working in Ruby and other modes that don't have the right stuff built in (unlike the mode for Python).

Nevertheless, this doesn't work.  Why don't more programming modes support this mode?

#+begin_src emacs-lisp
(setq-default prettify-symbols-alist '(("->" . ?→)
 				       ("<-" . ?←)
                                       ("->>" . ?↠)
                                       ("->>" . ?↞)
                                       ("=>" . ?⇒)
                                       ("!=" . ?≠)
                                       ("==" . ?≡)
                                       ("<=" . ?≤)
                                       (">=" . ?≥)
				       ))
#+end_src

Further customizations are set up by language.

* Sessions, buffers, windows and projects

** Regions

I'm old enough to be able to use ~narrow-to-region~.

#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+end_src

This is another [[https://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][borrowing from Arthur Malabarba]].  ~C-x w~ narrows or widens the region, as appropriate.  This is beautiful magic in Org.

#+begin_src emacs-lisp
(defun narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or defun,
whichever applies first. Narrowing to org-src-block actually
calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is
already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning) (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if you
         ;; don't want it.
         (cond ((ignore-errors (org-edit-src-code))
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

(define-key ctl-x-map "w" #'narrow-or-widen-dwim)
(eval-after-load 'latex '(define-key LaTeX-mode-map "\C-xw" nil))
#+end_src

wrap-region to wrap regions in * or / etc.  Extra lines taken from [[http://pragmaticemacs.com/emacs/wrap-text-in-custom-characters/][Wrap text in custom characters]].

#+begin_src emacs-lisp
(use-package wrap-region
  :defer t
  :diminish wrap-region-mode
  :config
  ;; (wrap-region-mode t)
  (wrap-region-add-wrappers
   '(("*" "*" nil org-mode)
     ("~" "~" nil org-mode)
     ("/" "/" nil org-mode)
     ("=" "=" "+" org-mode)
     ("_" "_" nil org-mode)
     ("$" "$" nil (org-mode latex-mode))))
  :init
  (add-hook 'org-mode-hook 'wrap-region-mode)
  (add-hook 'latex-mode-hook 'wrap-region-mode)
  )
#+end_src

[[https://github.com/magnars/expand-region.el][Expand-region]] is kind of magical.  ~C-=~ successively expands the region with great intelligence.

#+begin_src emacs-lisp
(use-package expand-region
  :defer t
  :init
  (global-set-key (kbd "C-=") 'er/expand-region)
  )
#+end_src

** Buffers

Remember all (well, almost) the buffers I have open.

#+begin_src emacs-lisp
(desktop-save-mode 1)
(setq history-length 50)
(setq desktop-buffers-not-to-save
      (concat "\\("
	      "^nn\\.a[0-9]+\\|\\.log\\|(ftp)\\|^tags\\|^TAGS"
	      "\\|\\.emacs.*\\|\\.diary\\|elpa\/*\\|\\.bbdb"
	      "\\)$"))
(add-to-list 'desktop-modes-not-to-save 'dired-mode)
(add-to-list 'desktop-modes-not-to-save 'Info-mode)
(add-to-list 'desktop-modes-not-to-save 'info-lookup-mode)
(add-to-list 'desktop-modes-not-to-save 'fundamental-mode)
#+end_src

Add parts of each file's directory to the buffer name if not unique.

#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+end_src

A few things about the scratch buffer.  By default it's in lisp-interaction-mode by default, but I use Org more, so make it that.

#+begin_src emacs-lisp
(setq initial-major-mode 'org-mode)
(setq initial-scratch-message "")
#+end_src

Use ~C-c b~ to create a new scratch buffer.

#+begin_src emacs-lisp
(defun create-scratch-buffer nil
  "Create a new scratch buffer to work in (could be *scratch* - *scratchX*)."
  (interactive)
  (let ((n 0)
	bufname)
    (while (progn
	     (setq bufname (concat "*scratch"
				   (if (= n 0) "" (int-to-string n))
				   "*"))
	     (setq n (1+ n))
	     (get-buffer bufname)))
    (switch-to-buffer (get-buffer-create bufname))
    (org-mode)))
(global-set-key (kbd "C-c b") 'create-scratch-buffer)
#+end_src

When I want to kill a buffer, it's always the current one, so don't ask.  ([[http://pragmaticemacs.com/emacs/dont-kill-buffer-kill-this-buffer-instead/][Source]].)

#+begin_src emacs-lisp
(defun wtd/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-x k") 'wtd/kill-this-buffer)
#+end_src

~ibuffer~ is a nicer way of showing the buffer list (~C-x C-b~).  It's built in.  Alias the usual buffer list command to =ibuffer=.

#+begin_src emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+end_src

Set up some default groups so that files are grouped by type (or location).

#+begin_src emacs-lisp
(setq ibuffer-saved-filter-groups
      (quote (("default"
 	       ("dired" (mode . dired-mode))
 	       ("emacs" (or
 			 (name . "^\\*scratch\\*$")
 			 (name . "^\\*Messages\\*$")))
	       ))))
#+end_src

** Windows

Split the window horizontally, not vertically (I prefer side-by-side with wider screens).

#+begin_src emacs-lisp
(setq split-height-threshold nil)
(setq split-width-threshold 0)
#+end_src

Make window splitting easier: ~C-x 2~ for vertical split, ~C-x 3~ for horizontal.

#+begin_src emacs-lisp
(defun wtd/vsplit-last-buffer (PREFIX)
  "Split the window vertically and display the previous buffer.
   By default, switch to that new window; with PREFIX, stay where you are."
  (interactive "p")
  (split-window-vertically)
  (other-window 1 nil)
  (unless prefix
    (switch-to-next-buffer)))

(defun wtd/hsplit-last-buffer (PREFIX)
  "Split the window horizontally and display the previous buffer.
   By default, switch to that new window; with PREFIX, stay where you are."
  (interactive "p")
  (split-window-horizontally)
  (other-window 1 nil)
  (unless prefix (switch-to-next-buffer)))

(global-set-key (kbd "C-x 2") 'wtd/vsplit-last-buffer)
(global-set-key (kbd "C-x 3") 'wtd/hsplit-last-buffer)
#+end_src

Use ~C-c left~ or ~C-c right~ to go back and forth in window configurations.

#+begin_src emacs-lisp
(winner-mode t)
#+end_src

Or use ~M-o~ as a shortcut for ~other-window~ instead of the default ~C-x o~, which is too long.  This makes it much easier to toggle between windows.

#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+end_src

I could use [[https://depp.brause.cc/eyebrowse/][eyebrowse]] to manage window configurations, but I never did, so I took out the code.  I'll leave this note here in case I want to go back.

** Sessions

When I close a session, save exactly where I was in the files.

#+begin_src emacs-lisp
(require 'saveplace)
(setq save-place-file (expand-file-name ".places" user-emacs-directory))
(save-place-mode)
#+end_src

** Projects

I don't use [[https://github.com/bbatsov/projectile][Projectile]] much, but I like to have it around.  I think it's perhaps better suited for bigger projects than I work on.

#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  (setq projectile-mode-line-function '(lambda () (format " ᴨ[%s]" (projectile-project-name))))
  )
#+end_src

For [[https://github.com/purcell/ibuffer-projectile][ibuffer-projectile]].

#+begin_src emacs-lisp
(use-package ibuffer-projectile
  :defer t
  :init
  (add-hook 'ibuffer-hook
	    (lambda ()
	      (ibuffer-projectile-set-filter-groups)
	      (unless (eq ibuffer-sorting-mode 'alphabetic)
		(ibuffer-do-sort-by-alphabetic))))
  )
#+end_src

* Minibuffer

** Amx

[[https://github.com/DarwinAwardWinner/amx/][Amx]] is a replacement for ~M-x~.  It works with Ivy.

#+begin_src emacs-lisp
(use-package amx
  :requires helm
  :after ivy
  :custom
  (amx-backend 'ivy)
  )
#+end_src

** Ivy, Swiper and Counsel

These [[https://github.com/abo-abo/swiper][three packages]] all work together:  "Ivy, a generic completion mechanism for Emacs.  Counsel [is] a collection of Ivy-enhanced versions of common Emacs commands.  Swiper is an Ivy-enhanced alternative to Isearch."

First, call up Ivy.  "~ivy-mode~ ensures that any Emacs command using ~completing-read-function~ uses ivy for completion."

#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (setq ivy-count-format "%d/%d ")
  )
#+end_src

Then Counsel.  "Counsel takes this further, providing versions of common Emacs commands that are customised to make the best use of Ivy."

#+begin_src emacs-lisp
(use-package counsel
  ;; :bind (("C-x b" . counsel-switch-buffer) ;; Show list of buffers to switch to, but also show the buffer at point while moving through list.  Slow!
  :config
  (counsel-mode)
  )
#+end_src

Then Swiper.  "Swiper is an alternative to isearch that uses Ivy to show an overview of all matches."  Override some keystrokes that aren't already handled by ~counsel-mode~ being on.

#+begin_src emacs-lisp
(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-c C-r" . ivy-resume)
	     ("M-i" . counsel-imenu)
         ("C-M-i" . complete-symbol)
         ("C-." . counsel-imenu)
         ("C-c 8" . counsel-unicode-char)
         ("C-c g" . counsel-git)
         ("C-c k" . counsel-ag)
         ("C-c v" . ivy-push-view)
         ("C-c V" . ivy-pop-view)
         ("M-y" . counsel-yank-pop))
  )
#+end_src

From the FAQ:

#+begin_quote
Q: How do I enter an input that matches one of the candidates instead of this candidate? Example: create a file bar when a file barricade exists in the current directory.

A: Press C-M-j. Alternatively, you can make the prompt line selectable with (setq ivy-use-selectable-prompt t).
#+end_quote

Finally, enhance Ivy with [[https://github.com/Yevgnen/ivy-rich][ivy-rich]] to get more details about commands and files in minibuffer listings.

#+begin_src emacs-lisp
(use-package ivy-rich
  :config
  (ivy-rich-mode 1)
  )
#+end_src

* Command launchers

These key mappings (=C-x l something=) make it easier to run common things.  I learned about this from Arthur Malabarba's [[http://endlessparentheses.com/launcher-keymap-for-standalone-features.html][Launcher keymap for standalone features]].

#+begin_src emacs-lisp
(define-prefix-command 'launcher-map)
(define-key ctl-x-map "l" 'launcher-map)
(define-key launcher-map "c" #'calculator) ; calc is too much
(define-key launcher-map "g" #'magit-status)
(define-key launcher-map "l" #'goto-line)
(define-key launcher-map "m" #'mc/edit-lines)
(define-key launcher-map "p" #'list-packages)
(define-key launcher-map "s" #'eshell)
(define-key launcher-map "u" #'magit-pull-from-upstream)
(define-key launcher-map "w" #'count-words-region)
#+end_src

* Editing

** Scrolling

Scroll by one line at a time.

#+begin_src emacs-lisp
(setq scroll-conservatively 10000)
#+end_src

A tip [[https://emacs.stackexchange.com/a/28746/145][found on Stack Exchange]] to stop scrolling from slowing things down.

#+begin_src emacs-lisp
(setq auto-window-vscroll nil)
#+end_src

** Whitespace

Remove trailing whitespace (at the end of a file) automatically.

#+begin_src emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

But it should end with a newline, so if there isn't one there, add it.

#+begin_src emacs-lisp
(setq require-final-newline t)
#+end_src

But down-arrow at the end of a file shouldn't add in a new line.

#+begin_src emacs-lisp
(setq next-line-add-newlines nil)
#+end_src

If there are any empty lines at the end of a buffer, show them (but they will disappear on saving, because of the above).

#+begin_src emacs-lisp
(set-default 'indicate-empty-lines t)
#+end_src

** Colours

[[https://elpa.gnu.org/packages/rainbow-mode.html][Rainbow-mode]] is a handy little helper.  "All strings representing colors will be highlighted with the color they represent."

#+begin_src emacs-lisp
(use-package rainbow-mode
  :init
  (add-hook 'prog-mode-hook 'rainbow-mode)
  :config
  (rainbow-mode t) ;; #0af
  )
#+end_src

** Other editing

Let me upcase or downcase a region, which is disabled by default.

#+begin_src emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+end_src

With [[https://github.com/victorhge/iedit][iedit]] I can edit multiple occurrences of the same text all at once (see [[https://www.masteringemacs.org/article/iedit-interactive-multi-occurrence-editing-in-your-buffer][Mickey Petersen's post about it]]).

#+begin_src emacs-lisp
(use-package iedit
  :bind
  (("C-:" . iedit-mode))
  )
#+end_src

I don't use multiple cursors ... but I could.

#+begin_src emacs-lisp :tangle no
(use-package multiple-cursors)
#+end_src

Open a new line above or below the current one, even if the cursor is mid-sentence.

#+begin_src emacs-lisp
(defun open-line-below ()
  (interactive)
  (end-of-line)
  (newline)
  (indent-for-tab-command))

(defun open-line-above ()
  (interactive)
  (beginning-of-line)
  (newline)
  (forward-line -1)
  (indent-for-tab-command))

(global-set-key (kbd "<C-return>") 'open-line-below)
(global-set-key (kbd "<C-S-return>") 'open-line-above)
#+end_src

Move an entire line up or down with C-S-up or C-S-down.

#+begin_src emacs-lisp
(defun move-line-down ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines 1))
    (forward-line)
    (move-to-column col)))

(defun move-line-up ()
  (interactive)
  (let ((col (current-column)))
    (save-excursion
      (forward-line)
      (transpose-lines -1))
    (move-to-column col)))

(global-set-key (kbd "<C-S-down>") 'move-line-down)
(global-set-key (kbd "<C-S-up>") 'move-line-up)
#+end_src

Join the following line onto this one.  Good for reformatting.

#+begin_src emacs-lisp
(global-set-key (kbd "M-j")
            (lambda ()
                  (interactive)
                  (join-line -1)))
#+end_src

** Searching

Make searches case insensitive.

#+begin_src emacs-lisp
(setq case-fold-search nil)

#+end_src

Turn on highlighting for search strings.

#+begin_src emacs-lisp
(setq search-highlight t)
#+end_src

[[https://github.com/syohex/emacs-anzu][Anzu-mode]] provides a "minor mode which display current point and total matched in various search mode."

#+begin_src emacs-lisp
(use-package anzu
  :diminish anzu-mode
  :config
  (global-anzu-mode t)
  (global-set-key (kbd "M-%") 'anzu-query-replace)
  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)
  )
#+end_src

I was getting errors about exceeding the defaults on both of these.

#+begin_src emacs-lisp
(setq max-specpdl-size 50000)
(setq max-lisp-eval-depth 25000)
#+end_src

** Copying and pasting

Highlight marked text.

#+begin_src emacs-lisp
(transient-mark-mode t)
#+end_src

Remove text in active region if inserting text.

#+begin_src emacs-lisp
(delete-selection-mode 1)
#+end_src

The [[https://github.com/k-talo/volatile-highlights.el][volatile-highlights]] mode temporarily highlights what you've just pasted in.  When you move the pointer, it disappears.

#+begin_src emacs-lisp
(use-package volatile-highlights
  :init (volatile-highlights-mode t)
  :diminish volatile-highlights-mode
  :config
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree)
  )
#+end_src

Enable cutting/pasting and putting results into the X clipboard

#+begin_src emacs-lisp
(global-set-key [(shift delete)] 'clipboard-kill-region)
(global-set-key [(control insert)] 'clipboard-kill-ring-save)
(global-set-key [(shift insert)] 'clipboard-yank)
#+end_src

Allow pasting selection outside of Emacs.

#+begin_src emacs-lisp
(setq select-enable-clipboard t)
#+end_src

~M-backspace~ is ~backward-word-kill~, and ~C-backspace~ is bound to that by default. Change that to ~backword-kill-line~ so it deletes from the point to the beginning of the line.

#+begin_src emacs-lisp
(global-set-key (kbd "C-<backspace>") (lambda ()
					(interactive)
					(kill-line 0)))
#+end_src

** Spelling

Usually I invoke =M-x ispell= to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Spelling.html][check spelling]], or =M-$= on a word to deal with it, but I'm going to try [[https://github.com/d12frosted/flyspell-correct][flyspell-correct]] and see how that helps.  =C-;= to jump back to the first misspelled word before the point, then jump back to where you were.  Good for very easily fixing a mistake a few words back.  (Use ~M-o~ to see the options for saving or ignoring a word.)

#+begin_src emacs-lisp
(use-package flyspell-correct
  :after flyspell
  :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

(use-package flyspell-correct-ivy
  :after flyspell-correct)
#+end_src

Use Flyspell for spell-checking in comments in programs.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+end_src

** Expansions and abbreviations

*** Abbrevs

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html#Abbrevs][Abbrevs]] are words or letter combinations that when typed expand into longer words or phrases.  New ones can be added with =define-global-abbrev= or =define-mode-abbrev= for a particular mode.

#+begin_src emacs-lisp
(setq-default abbrev-mode t)
#+end_src

The [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Files.html][abbrevs are saved]] in this file.  "The abbrevs are saved in the form of a Lisp program to define the same abbrev tables with the same contents."

#+begin_src emacs-lisp
(setq abbrev-file-name "~/.emacs.d/abbrev_defs")
#+end_src

*** Yasnippet

[[https://joaotavora.github.io/yasnippet/][Yet Another Snippet Extension]].

#+begin_src emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config
  (use-package yasnippet-snippets)
  (yas-global-mode 1)
  )
#+end_src

** Completions

#+begin_src emacs-lisp
(setq tab-always-indent 'complete) ;; Try to indent current line; if already indented, try to complete the thing at point.
#+end_src

*** Company

[[https://company-mode.github.io/][Company]] "is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates."

#+begin_src emacs-lisp :tangle no
(use-package company
  :diminish company-mode
  :init
  ;; (global-company-mode)
  (add-hook 'ruby-mode-hook 'company-mode)
  :config
  (setq company-minimum-prefix-length 1)
  (setq company-idle-delay 1)
  (setq company-tooltip-align-annotations 't)          ; Align annotations to the right tooltip border.
  (setq company-begin-commands '(self-insert-command)) ; Start autocompletion only after typing.
  (setq company-tooltip-limit 20)                      ; Bigger pop-up windows.
  )
#+end_src

*** Corfu

Trying out [[https://github.com/minad/corfu][Corfu]] (smaller than Company), "which relies on the Emacs completion facilities and concentrates on providing a polished completion UI."

#+begin_src emacs-lisp
(use-package corfu
  :init
  (global-corfu-mode)
  )
#+end_src

** Undoing

[[https://gitlab.com/tsc25/undo-tree][undo-tree]] gives a nice visualization of changes to the file.

#+begin_src emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode)
  (setq undo-tree-auto-save-history nil) ;; If t then big dot files start accumulating
  :custom
  (undo-tree-visualizer-timestamps t)
  (undo-tree-visualizer-diff t)
  )
#+end_src

* File management

Keep a list of recently opened files

#+begin_src emacs-lisp
(require 'recentf)
(recentf-mode 1)
(setq recentf-save-file "~/.recentf")
#+end_src

Rebind FFAP's =find-file-at-point= so it goes with =C-x f= (usually =find-file=), so I don't have to use =C-x C-f= (its default binding).  Saves time.

#+begin_src emacs-lisp
(global-set-key (kbd "C-x f") 'find-file-at-point)
#+end_src

Refresh buffers when files change.  But don't worry:  "Auto Revert will not revert a buffer if it has unsaved changes, or if its file on disk is deleted or renamed."

#+begin_src emacs-lisp
(global-auto-revert-mode t)
#+end_src

Don't show uninteresting files in Emacs completion window ([[https://stackoverflow.com/a/1732081/854346][from Stack Overflow]]).  When the buffer of possible files open, it shows all matches.  If I'm looking for ~foo.ext~ and hit ~C-x C-f fo TAB~ it will show ~foo.ext~ and ~foo.ext~~.  Because =~= is in completion-ignored-extensions it won't try to open ~foo.ext~~, but I'd rather not see it in the first place.

#+begin_src emacs-lisp
(defadvice completion--file-name-table (after ignoring-backups-f-n-completion activate)
  "Filter out results when they match `completion-ignored-extensions'."
  (let ((res ad-return-value))
    (if (and (listp res)
	     (stringp (car res))
	     (cdr res))                 ; length > 1, don't ignore sole match
	(setq ad-return-value
              (completion-pcm--filename-try-filter res)))))
#+end_src

** Dired

Auto refresh dired, but be quiet about it.

#+begin_src emacs-lisp
(setq global-auto-revert-non-file-buffers t)
#+end_src

Tell dired how to handle some file types.

#+begin_src emacs-lisp
(setq dired-guess-shell-alist-user
      '(("\\.pdf\\'" "evince")
	("\\.tex\\'" "pdflatex")
	("\\.ods\\'\\|\\.xlsx?\\'\\|\\.docx?\\'\\|\\.csv\\'" "libreoffice")))
#+end_src

~C-x C-j~ (~M-x dired-jump~) instantly goes to the current file's position in a dired buffer.  No need to open up a dired buffer and move the pointer.

#+begin_src emacs-lisp
(require 'dired-x)
#+end_src

Emacs 24.4 defaults to an =ls -1= (dash one) view, not =ls -l= ( dash ell), but I want the long format.

#+begin_src emacs-lisp
(setq diredp-hide-details-initially-flag nil)
#+end_src

"In Dired, visit this file or directory instead of the Dired buffer."  Prevents buffers littering up things when moving around in Dired.

#+begin_src emacs-lisp
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

Reuse the current buffer when moving into a new directory.

#+begin_src emacs-lisp
(setq dired-kill-when-opening-new-dired-buffer t)
#+end_src

Make it easier to move and copy files across windows.

#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src

=dired+= has got some wild colours by default. This turns that off, but leaves the settings at maximum (the default) for everything else.

#+begin_src emacs-lisp
(setq font-lock-maximum-decoration (quote ((dired-mode) (t . t))))
#+end_src

** Rename or delete the current buffer and its file

File management shortcuts from [[https://github.com/bodil/emacs.d][Bodil Stokke]]'s setup.  These are both really handy.

+ ~C-x C-k~ to delete the file being edited and kill the buffer
+ ~C-x C-r~ to rename the file being edited end the current buffer

#+begin_src emacs-lisp
(defun delete-current-buffer-file ()
  "Delete file connected to current buffer and kill buffer."
  (interactive)
  (let ((filename (buffer-file-name))
        (buffer (current-buffer))
        (name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
        (ido-kill-buffer)
      (when (yes-or-no-p "Are you sure you want to delete this file? ")
        (delete-file filename)
        (kill-buffer buffer)
        (message "File '%s' successfully removed" filename)))))
(global-set-key (kbd "C-x C-k") 'delete-current-buffer-file)
#+end_src

#+begin_src emacs-lisp
(defun rename-current-buffer-file ()
  "Rename current buffer and file it is visiting."
  (interactive)
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (error "Buffer '%s' is not visiting a file!" name)
      (let ((new-name (read-file-name "New name: " filename)))
        (if (get-buffer new-name)
            (error "A buffer named '%s' already exists!" new-name)
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil)
          (message "File '%s' successfully renamed to '%s'"
                   name (file-name-nondirectory new-name)))))))
(global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
#+end_src

* File types

** CSV

I love CSV files, but I'd rather load them into Org or R then edit them directly.  Still ...

#+begin_src emacs-lisp
(use-package csv-mode)
#+end_src

** JSON

[[https://github.com/joshwnj/json-mode][JSON-mode]].

#+begin_src emacs-lisp
(use-package json-mode)
#+end_src

** Markdown

#+begin_src emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (
	 ("README\\.md\\'" . gfm-mode)
	 )
  :init
  ;; (setq markdown-command "multimarkdown")
  (setq markdown-hide-urls t
	markdown-hide-markup t
	markdown-url-compose-char "⋯"
	markdown-header-scaling t
	)
  :hook
  'turn-on-visual-line-mode
  )
#+end_src

** PDF

(May 2022:  Turned this off because of a problem with the required =tablist= package, which wouldn't go in; and anyways I wasn't using it.)

[[https://github.com/politza/pdf-tools][PDF Tools]] allows commenting on PDFs, not just viewing.  I took [[http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/][this snippet from Pragmatic Emacs]] and tweaked it.

#+begin_src emacs-lisp :tangle no
(use-package pdf-tools
  :pin melpa ;; melpa to get it to install, maybe change to manual if need be?
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-page) ;; Use H, W or P to scale.
  (setq pdf-annot-activate-created-annotations t) ;; Automatically annotate highlights.
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward);; Use normal isearch because Swiper doesn't do PDFs.
  :hook
  (pdf-view-mode . (lambda() (linum-mode -1))) ;; linum-mode doesn't work well with PDF Tools, apparently.
 )
#+end_src

** XML

[[https://www.gnu.org/software/emacs/manual/html_mono/nxml-mode.html][nXML mode]] is for XML files.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist
	     (cons (concat "\\." (regexp-opt '("xml" "xsd" "sch" "rng" "xslt" "svg" "rss") t) "\\'")
		   'nxml-mode))
#+end_src

Adding this [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Hideshow.html][Hideshow minor mode]] hook means I can fold or hide chunks of XML with =C-c SPC h= (while sitting on the opening tag).

#+begin_src emacs-lisp
(add-to-list 'hs-special-modes-alist
	     '(nxml-mode
               "<!--\\|<[^/>]*[^/]>"
               "-->\\|</[^/>]*[^/]>"
               "<!--"
               sgml-skip-tag-forward
               nil))

(add-hook 'nxml-mode-hook 'hs-minor-mode)
#+end_src

Define the actual keystroke now that the rest has been set up.  The default is longer and confusing.

#+begin_src emacs-lisp
(with-eval-after-load "nxml-mode"
  (define-key nxml-mode-map "\C-c h" 'hs-toggle-hiding))
#+end_src

** YAML

[[https://github.com/yoshiki/yaml-mode][YAML-mode]] seems to be a small package, and not maintained much any more, but it works.

#+begin_src emacs-lisp
(use-package yaml-mode
  :init
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
  )
#+end_src

* Git

[[https://magit.vc/][Magit]] will install ~with-editor~ when it goes in.

#+begin_src emacs-lisp
(use-package magit
  ;; :config
  )
#+end_src

[[https://github.com/syohex/emacs-git-gutter][git-gutter]].

#+begin_src emacs-lisp
(use-package git-gutter-fringe
  :diminish git-gutter-mode
  :config
  (global-git-gutter-mode t)
  (setq git-gutter-fr:side 'right-fringe)
  )
#+end_src

* Org

A note I made on 16 April 2013:  "Started using org-mode ... I could really get into this."

** Manage and configure with use-package

The =use-package= syntax here is messy.  All of the hooks should go under =:hook= and the appearance teaks under =:custom-face=, but I don't know how to do that yet.

#+begin_src emacs-lisp
(use-package org
  ;; Use Org's current development branch, pulled down with Git.  See https://orgmode.org/org.html#Installation.
  :pin manual
  :load-path "/usr/local/src/org-mode/lisp"
  :init
  (setq
    org-confirm-babel-evaluate nil ;; Evaluate Babel blocks without asking for confirmation
    org-cycle-separator-lines 0 ;; Never show blank lines in condensed view
    org-display-inline-images t ;; Embed an image with [[file:foo.png]] and then C-c C-x C-v to view
    org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar" ;; External dependency: ditaa
    org-ellipsis " ⬎" ;; ⤵ ↴  Change the ellipsis that indicates hidden content
    org-export-backends (quote (html latex md odt)) ;; Exporting: I will see these export options after C-c C-e ;; beamer reveal
    ;; org-export-date-timestamp-format "%d %m %Y" ;; Date format on exports
    org-export-with-smart-quotes t ;; Turn plain quotes into posh (I can't include examples in here or it breaks paren matching!)
    org-fontify-whole-heading-line t
    org-footnote-auto-adjust nil ;; Don't resort or adjust them without my saying so.
    org-footnote-section nil ;; Define footnotes nearby when I use C-c C-x f
    org-hide-emphasis-markers t ;; Hide the /italics/ and *bold* markers
    org-hide-macro-markers t ;; Hide {{{macro}}} curly brackets; see also wtd/toggle-org-macro-markers
    org-highlight-latex-and-related '(latex) ;; Highlight inline LaTeX
    org-image-max-width nil ;; nil means "do not limit image width"
    org-image-actual-width nil ;; nil means "try to get the width from an #+ATTR.* keyword and fall back on the original width if none is found."
    org-list-allow-alphabetical t ;; Allow a b c lists
    org-pretty-entities t ;; org-entities displays \alpha etc. as Unicode characters.
    org-return-follows-link t ;; Hit return on a link to open it in a browser
    org-special-ctrl-a/e t ;; Make C-a and C-e understand how headings and tags work
    org-src-fontify-natively t ;; Fontify Babel blocks nicely
    org-src-preserve-indentation t ;; Preserve indentation when tangling source blocks (important for makefiles)
    org-src-window-setup 'current-window ;; How to rearrange things when I edit a source block.  Default is regorganize-frame.
    org-startup-indented t ;; Visually indent everything nicely, but leave the raw file left-aligned
    org-startup-with-inline-images t ;; Show images on startup
    org-support-shift-select t ;; Shift and arrow keys to select text works a bit differently in Org.
    org-tags-column 120 ;; Right-align tags to an indent from the right margin, could use  (- 50 (window-width))
    org-use-speed-commands t ;; Allow speed commands
    )

  ;; Define my own link abbreviations
  (setq org-link-abbrev-alist
	'(
	  ("DOI" . "http://dx.doi.org/%s")                        ;; Thus [[DOI:10.1108/07378831111138189]]
	  ("WP"  . "https://en.wikipedia.org/wiki/%s")            ;; Thus [[WP:Toronto, Ontario]]
	  ("YUL" . "https://ocul-yor.primo.exlibrisgroup.com/permalink/01OCUL_YOR/1jocqcq/%s") ;; Thus [[YUL:alma991029590289705164]] for Omni
	  )
	)

  ;; Clocking
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)

  ;; Automatically refresh inline images that are generated from Babel blocks
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)

  ;; Display images when a file is loaded (I can always toggle them off if I don't want them)
  (add-hook 'org-mode-hook (lambda () (org-toggle-inline-images)))

  ;; Use LaTeX spell-check
  (add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))

  ;; Use C-c d to close all the open drawers in a file
  (defun wtd/add-org-close-all-drawers-key ()
    (local-set-key (kbd "C-c d") (lambda () (interactive) (org-cycle-hide-drawers 'all))))
  (add-hook 'org-mode-hook 'wtd/add-org-close-all-drawers-key)

  ;; Hooks for prettify-symbols-mode
  ;; See also https://pank.eu/blog/pretty-babel-src-blocks.html for some cool stuff
  ;; And https://github.com/zzamboni/dot-emacs/blob/master/init.org#source-code-blocks
  ;; for some stuff I tried out but decided was a bit too much for me.
  (add-hook 'org-mode-hook
 	  (lambda ()
 	    (push '("<=" . ?≤) prettify-symbols-alist)
 	    (push '(">=" . ?≥) prettify-symbols-alist)
 	    (push '("|>" . ?▷) prettify-symbols-alist)
 	    (push '("#+BEGIN_SRC" . ?⎡) prettify-symbols-alist) ;;  ⎡ ➤ ➟ ➤ ✎
 	    (push '("#+END_SRC" . ?⎣) prettify-symbols-alist) ;; ⎣ ✐
 	    (push '("#+begin_src" . ?⎡) prettify-symbols-alist)
 	    (push '("#+end_src" . ?⎣) prettify-symbols-alist)
 	    (push '("#+BEGIN_QUOTE" . ?❝) prettify-symbols-alist)
 	    (push '("#+END_QUOTE" . ?❞) prettify-symbols-alist)
 	    (push '("#+begin_quote" . ?❝) prettify-symbols-alist)
 	    (push '("#+end_quote" . ?❞) prettify-symbols-alist)
 	    ;; (push '("[ ]" . ?☐) prettify-symbols-alist)
 	    ;; (push '("[X]" . ?☒) prettify-symbols-alist)
 	    ))

  :config
  (global-set-key "\C-cl" 'org-store-link)

  ;; In 25 Org started opening exported PDFs in docview, but I prefer seeing them externally.
  ;; (delete '("\\.pdf\\'" . default) org-file-apps)
  ;; (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))

  ;; Active Babel languages (http://orgmode.org/org.html#Languages)
  (org-babel-do-load-languages 'org-babel-load-languages '(
     (ditaa . t)
     (dot . t)
     (latex . t)
     (lilypond . t)
     (python . t)
     (R . t)
     (ruby . t)
     (shell . t)
     (sql . t)
     (sqlite . t)
     ))

  ;; Appearance.

  (set-face-attribute 'org-link nil :foreground "Steel Blue")
  (set-face-attribute 'org-footnote nil :height 0.9)

  ;; Source code block appearance
  (set-face-attribute 'org-block-begin-line nil :underline nil)
  (set-face-attribute 'org-block-end-line nil :overline nil)

  (set-face-attribute 'org-verbatim nil :family "Ubuntu Mono" :height wtd-ubuntu-mono-height)

  (set-face-attribute 'org-ellipsis nil :underline nil)

  ;; Make LOGBOOK and such fainter.  Default bold is too loud.
  (face-spec-set 'org-drawer '((t (:foreground "dim gray" :weight normal :height 0.9))))
  (face-spec-set 'org-special-keyword '((t (:foreground "dim gray" :weight normal :height 0.9))))
  (face-spec-set 'org-property-value '((t (:weight normal :height 0.9))))

  ;; Make completed items in a checkbox list less noticeable
  ;; https://fuco1.github.io/2017-05-25-Fontify-done-checkbox-items-in-org-mode.html
  (font-lock-add-keywords
   'org-mode
 `(("^[ \t]*\\(?:[-+*]\\|[0-9]+[).]\\)[ \t]+\\(\\(?:\\[@\\(?:start:\\)?[0-9]+\\][ \t]*\\)?\\[\\(?:X\\|\\([0-9]+\\)/\\2\\)\\][^\n]*\n\\)" 1 'org-headline-done prepend))
 'append)

  ;; (face-spec-set 'org-level-1 '((t (:height 1.05))))
  ;; (face-spec-set 'org-level-2 '((t (:height 1.05))))
  ;; (face-spec-set 'org-level-3 '((t (:height 1.0))))

  :hook
  (
   (org-mode . wrap-region-mode)
   (org-mode . turn-on-flyspell) ;; Use flyspell to check spelling as I go
   )
  )
#+end_src

To reveal markup there is =visibility-mode=, which can be toggled on or off for the whole file, but [[https://github.com/awth13/org-appear][org-appear]] "provides a way to toggle visibility of hidden elements such as emphasis markers, links, etc. by customising specific variables."  (November 2022: This seems to be making Org freeze on large tables, so I'm turning it off for now.)

#+begin_src emacs-lisp :tangle no
(use-package org-appear
  :config
  :hook (org-mode . org-appear-mode)
  )
#+end_src

That doesn't work on the {{{ curly brackets }}} that define macros, though, so it's nice to have a way of toggling them.  (Note there should be no space before the name of the macro, or else hiding the braces doesn't work.)

#+begin_src emacs-lisp
(defun wtd/toggle-org-macro-markers ()
  "Toggle visibility of {{{macro}}} markers"
  (interactive)
  (setq org-hide-macro-markers (not org-hide-macro-markers))
  (font-lock-mode)
  (font-lock-mode))
#+end_src

** Some helper functions

Since I'm using ~C-x n~ to narrow and widen source blocks (see ~narrow-or-widen-dwim~) I don't need to use ~C-c `~ to enter and leave them, so I can use ~C-x C-s~ to save and exit them, which is nice.  [[http://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Source]].

#+begin_src emacs-lisp
(eval-after-load 'org-src
  '(define-key org-src-mode-map
     "\C-x\C-s" #'org-edit-src-exit))
#+end_src

[[https://emacs.stackexchange.com/a/49068/145][Replace a link with just the descriptive text]].

#+begin_src emacs-lisp
(defun wtd/org-link-delete-link ()
  "Remove the link from an Org link at point and keep only the description."
  (interactive)
  (let ((elem (org-element-context)))
    (if (eq (car elem) 'link)
        (let* ((content-begin (org-element-property :contents-begin elem))
               (content-end  (org-element-property :contents-end elem))
               (link-begin (org-element-property :begin elem))
               (link-end (org-element-property :end elem)))
          (if (and content-begin content-end)
              (let ((content (buffer-substring-no-properties content-begin content-end)))
                (delete-region link-begin link-end)
                (insert content)))))))
#+end_src

[[https://emacs.stackexchange.com/questions/13869/how-to-toggle-org-mode-source-code-block-eval-no-status][Use C-c t to toggle ":eval no|yes" status in source blocks]].

#+begin_src emacs-lisp
(defun org-toggle-src-eval-no ()
  "Toggle ':eval no' on the src block begin line."
  (defun in-src-block-p ()
    "Returns t when the point is inside a source code block"
    (string= "src" (org-in-block-p '("src"))))
  (defun beginning-src ()
    "Find the beginning of the src block"
    (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")))
  (defun toggle-eval-no ()
    "Handles the toggling of ' :eval no'"
    (save-excursion
      (end-of-line)
      (let ((case-fold-search t)) (search-backward "#+BEGIN_SRC")
	   (if (search-forward " :eval no" (line-end-position) "f")
	       (replace-match "")
	     (insert " :eval no")
	     ))))
  (if (in-src-block-p) (toggle-eval-no)))
(defun add-org-toggle-src-key ()
  (local-set-key (kbd "C-c t") (lambda () (interactive) (org-toggle-src-eval-no))))
(add-hook 'org-mode-hook 'add-org-toggle-src-key)
#+end_src

[[http://endlessparentheses.com/ispell-and-org-mode.html][Stop ispell from looking where it shouldn't]].

#+begin_src emacs-lisp
(defun wtd/org-ispell ()
  "Configure `ispell-skip-region-alist' for `org-mode'."
  (make-local-variable 'ispell-skip-region-alist)
  (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
  (add-to-list 'ispell-skip-region-alist '("~" "~"))
  (add-to-list 'ispell-skip-region-alist '("=" "="))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+begin_src" . "^#\\+end_src"))
  (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_EXAMPLE ". "#\\+END_EXAMPLE"))
  )
(add-hook 'org-mode-hook #'wtd/org-ispell)
#+end_src

So I can use Memoir as a document class in Org (but I don't).

#+begin_src emacs-lisp :tangle yes
(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
	       '("memoir-blocked"
		 "\\documentclass{memoir}
	       [NO-DEFAULT-PACKAGES]
	       [NO-PACKAGES]
	       [NO-EXTRA]"
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("letter" "\\documentclass{letter}"))
  (add-to-list 'org-latex-classes
               '("memoir"
                 "\\documentclass{memoir}"
                 ("\\book{%s}" . "\\book*{%s}")
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("memoir-chapter+"
                 "\\documentclass{memoir}"
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
  )
#+end_src

** Bullets

Prettify the headings and such with better bullets thanks to [[https://github.com/integral-dw/org-superstar-mode][org-superstar-mode]].

#+begin_src emacs-lisp
(use-package org-superstar
  :config
  (setq org-superstar-headline-bullets-list '("⊢" "ǁ" "ǀ" "⋱" "◉" "○")) ;; ǂ ⋮
  :hook
  (org-mode . (lambda () (org-superstar-mode 1)))
  )
#+end_src

** Possible: org-modern

https://github.com/minad/org-modern

#+begin_src emacs-lisp :tangle no
(use-package org-modern
  :hook org-mode
  )
#+end_src

** Org stuff I don't use right now

# ;; Better colouring of TODO keywords
# (setq org-todo-keyword-faces
#       (quote (
#       	("TODO" :foreground "SeaGreen" :weight normal)
#       	("WAITING" :foreground "Purple" :weight normal)
#       	)))

# ;; Refiling, which I never use.
# (setq org-refile-targets '(
#       		     ("~/york/shared/projects/projects.org" :maxlevel . 1)
#       		     ;; ("~/york/shared/reports/annual/2017-annual-report/denton-2016-2017-annual-report.org" :maxlevel . 2)
#       		     )
#       )

# ;; Capturing
# ;; (setq org-default-notes-file "~/org/capture.org") ; Change this when I use it for real
# ;; (define-key global-map "\C-cc" 'org-capture)
# (setq org-capture-templates
#       '(
#     	  ("w" "Work todo" entry (file+headline "~/york/shared/projects/projects.org" "Tasks") "* TODO %?\n %u\n %a")
#     	  ("d" "Work diary" entry (file+datetree "~/york/shared/work-diaries/work-diary.org" "Tasks") "** %?\n %u\n %a")
#         ("n" "Note"      entry (file+datetree "~/org/capture.org")                   "* %?\nEntered on %U\n  %i\n %a"))
#       )

# I asked and someone answered on the beta Emacs SE.
# https://emacs.stackexchange.com/questions/90/how-to-sometimes-but-not-always-add-a-note-to-an-org-todo-state-change
# This lets me force a note for any state change in TODO workflow.
# Use C-c C-T (capital T) to make Org ask me for a note, even if the normal workflow doesn't require it.
# (defun org-todo-force-notes ()
#   (interactive)
#   (let ((org-todo-log-states
#          (mapcar (lambda (state)
#                    (list state 'note 'time))
#                  (apply 'append org-todo-sets))))
#     (call-interactively 'org-todo)))
# (define-key org-mode-map (kbd "C-c C-S-t") 'org-todo-force-notes)

* Programming

** General stuff

I sometimes use CamelCase in Ruby and R.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'subword-mode)
#+end_src

Make script files executable automatically

#+begin_src emacs-lisp
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)
#+end_src

** Comint

Settings for command interpreter modes, which I use mostly for R and Ruby.

#+begin_src emacs-lisp
(setq ansi-color-for-comint-mode 'filter
      comint-scroll-to-bottom-on-input t
      comint-scroll-to-bottom-on-output t
      comint-move-point-for-output t
 )
;;(setq comint-prompt-read-only t)
#+end_src

Colourise the comint buffer.

#+begin_src emacs-lisp
(setq ansi-color-for-comint-mode 'filter)
#+end_src

** Syntax checking

[[https://www.flycheck.org/en/latest/][Flycheck]] for syntax checking.

#+begin_src emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :config
  (global-flycheck-mode)
  (setq flycheck-global-modes '(not org-mode)) ;; Could also set :modes to list where I want it.
  )
#+end_src

** Linting

Flycheck and lintr.

#+begin_src emacs-lisp
(setq-default flycheck-lintr-linters
              (concat "with_defaults(line_length_linter(120), "
                      "absolute_paths_linter = NULL, "
		      ;; "camel_case_linter = NULL, "
		      ;; "snake_case_linter = NULL, "
		      "commented_code_linter = NULL)"))
#+end_src

* R and ESS

[[https://ess.r-project.org/][ESS]].

#+begin_src emacs-lisp
(use-package ess
  :commands R
  :config
  (setq
   ess-use-flymake nil ;; Don't run flymake on these buffers
   ess-help-own-frame 'nil ;; Make all help buffers go into one frame
   ess-plain-first-buffername 'nil ;; Call the first process R:1, not just R
   ess-startup-directory 'default-directory ;; "Always start the process in the directory of the current file" (not in project home directory)
   ess-ask-for-ess-directory nil ;; Start in the current directory
   ess-history-file nil ;; No history files
   ;; ess-local-process-name "R" ;; What does this do?
   ess-R-font-lock-keywords (quote ;; Be more colourful!
			     ((ess-R-fl-keyword:modifiers . t)
			      (ess-R-fl-keyword:fun-defs . t)
			      (ess-R-fl-keyword:keywords . t)
			      (ess-R-fl-keyword:assign-ops . t)
			      (ess-R-fl-keyword:constants . t)
			      (ess-fl-keyword:fun-calls . t)
			      (ess-fl-keyword:numbers . t)
			      (ess-fl-keyword:operators . t)
			      (ess-fl-keyword:delimiters . t)
			      (ess-fl-keyword:=)
			      (ess-R-fl-keyword:F&T)))
   )
  :init
  ;; (add-hook 'ess-mode-hook 'highlight-indent-guides-mode) ;; indent-guide ... very nice
  ;; (add-hook 'ess-mode-hook (lambda () (flycheck-mode t)))
  ;; (add-hook 'ess-R-post-run-hook 'ess-execute-screen-options) ;; MESSES THINGS UP.  Use the full width of the Emacs frame.  Messes up R in Org, I found.
  ;; Display %>% as |, and |> as ▷.
  (add-hook 'inferior-ess-mode-hook
	    (lambda ()
	      (push '("%>%" . ?|) prettify-symbols-alist)
 	      (push '("|>" . ?▷) prettify-symbols-alist)
	      ))
  (add-hook 'ess-mode-hook
	    (lambda ()
	      (push '("%>%" . ?|) prettify-symbols-alist)
 	      (push '("|>" . ?▷) prettify-symbols-alist)
	      ))
  (add-hook 'ess-mode-hook
	    ;; This stops comments from flying all the way over to the right, and makes %>% chains indent nicely (if the newline is after the pipe).
	    (lambda ()
	      (setq ess-indent-offset 4
		    ess-offset-continued 2
		    ess-offset-continued 'straight
		    ess-brace-offset -4
		    ess-expression-offset 4
		    ess-else-offset 0
		    ess-close-brace-offset 0
		    ess-brace-imaginary-offset 0
		    ess-continued-brace-offset 0
		    ess-indent-from-lhs 4
		    ess-offset-arguments-newline '(4)
		    )))
)
#+end_src

* Ruby

This doesn't work.  Why not?

#+begin_src emacs-lisp
(add-hook 'ruby-mode-hook
	  (lambda ()
	    (push '("!=" . ?≠) prettify-symbols-alist)
	    ;; (push '("&&" . ?∧) prettify-symbols-alist)
 	    ;; (push '("||" . ?∨) prettify-symbols-alist)
	    ))
#+end_src

I use [[https://github.com/rbenv/rbenv][rbenv]], so Emacs needs to know about it.

#+begin_src emacs-lisp
(use-package rbenv
  :hook (ruby-mode . global-rbenv-mode)
  :config
  (setq rbenv-show-active-ruby-in-modeline nil
	rbenv-modeline-function 'rbenv--modeline-plain
   )
  (rbenv-use-global)
  )
#+end_src

Open up ~irb~ with ~M-x inf-ruby~ or ~C-c C-s~ from a Ruby buffer.

#+begin_src emacs-lisp
(use-package inf-ruby
  :hook (ruby-mode . inf-ruby-minor-mode)
  :config
  (autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
  (add-to-list 'inf-ruby-implementations' ("pry". "pry"))
  (setq inf-ruby-default-implementation "pry")
  )
#+end_src

Avoid ridiculous Ruby indentation.

#+begin_src emacs-lisp
(setq ruby-deep-indent-paren nil)
#+end_src

Don't put the UTF-8 encoding comment at the top.

#+begin_src emacs-lisp
(setq ruby-insert-encoding-magic-comment nil)
#+end_src

Parentheses.

#+begin_src emacs-lisp :tangle no
(require 'smartparens-ruby)
#+end_src

"Finds all the URLs in the buffer, highlights them, and turns them into clickable buttons."  Use =C-c RET= to follow a link.

TODO Make Org's =C-c C-o= more general and follow these links too.

#+begin_src emacs-lisp
(add-hook 'ruby-mode-hook #'goto-address-mode)
#+end_src

[[https://github.com/bbatsov/rubocop][Rubocop]] is a huge help when writing Ruby.

#+begin_src emacs-lisp
(use-package rubocop
  :diminish rubocop-mode
  :hook (ruby-mode . rubocop-mode)
  )
#+end_src

I tried using [[https://github.com/dgutov/robe][Robe]] for documentation lookup and such, but never used it.

* Jekyll

My [[https://www.miskatonic.org/][personal web site]] is built on [[https://jekyllrb.com/][Jekyll]].  I use these three commands a lot:

+ ~C-c j n~: create new draft post
+ ~C-c j p~: publish the post
+ ~C-c j t~: update the timestamp in the post

I wrote this timestamp function myself.  It's the most complex Lisp thing I've ever written!

#+begin_src emacs-lisp
(defun jekyll-timestamp ()
  "Update existing date: timestamp on a Jekyll page or post."
  (interactive)
  (save-excursion (
		   goto-char 1)
		  (re-search-forward "^date:")
		  (let ((beg (point)))
		    (end-of-line)
		    (delete-region beg (point)))
		  (insert (concat " " (format-time-string "%Y-%m-%d %H:%M:%S %z"))))
  )
#+end_src

I got all this from a web site that no longer exists.  Such is the way of the internet.

#+begin_src emacs-lisp
(global-set-key (kbd "C-c j n") 'jekyll-draft-post)
(global-set-key (kbd "C-c j p") 'jekyll-publish-post)
(global-set-key (kbd "C-c j t") 'jekyll-timestamp)
(global-set-key (kbd "C-c j o") (lambda () (interactive) (find-file "~/web/")))

(defvar jekyll-directory "~/web/" "Path to Jekyll blog.")
(defvar jekyll-drafts-dir "_drafts/" "Relative path to drafts directory.")
(defvar jekyll-posts-dir "_posts/" "Relative path to posts directory.")
(defvar jekyll-post-ext ".md"  "File extension of Jekyll posts.")
(defvar jekyll-post-template "---\nlayout: post\ntitle: %s\ntags:\ndate: \n---\n"
  "Default template for Jekyll posts. %s will be replace by the post title.")

(defun jekyll-make-slug (s) "Turn string S into a slug."
       (replace-regexp-in-string " " "-"  (downcase (replace-regexp-in-string "[^A-Za-z0-9 ]" "" s))))

(defun jekyll-yaml-escape (s) "Escape string S for YAML."
       (if (or (string-match ":" s) (string-match "\"" s)) (concat "\"" (replace-regexp-in-string "\"" "\\\\\"" s) "\"") s))

(defun jekyll-draft-post (title) "Create a new Jekyll blog post with title TITLE."
       (interactive "sPost Title: ")
       (let ((draft-file (concat jekyll-directory jekyll-drafts-dir
				 (jekyll-make-slug title)
				 jekyll-post-ext)))
	 (if (file-exists-p draft-file)
             (find-file draft-file)
	   (find-file draft-file)
	   (insert (format jekyll-post-template (jekyll-yaml-escape title))))))

(defun jekyll-publish-post () "Move a draft post to the posts directory, and rename it to include the date."
       (interactive)
       (cond
	((not (equal
               (file-name-directory (buffer-file-name (current-buffer)))
               (expand-file-name (concat jekyll-directory jekyll-drafts-dir))))
	 (message "This is not a draft post.")
	 (insert (file-name-directory (buffer-file-name (current-buffer))) "\n"
		 (concat jekyll-directory jekyll-drafts-dir)))
	((buffer-modified-p)
	 (message "Can't publish post; buffer has modifications."))
	(t
	 (let ((filename
		(concat jekyll-directory jekyll-posts-dir
			(format-time-string "%Y-%m-%d-")
			(file-name-nondirectory
			 (buffer-file-name (current-buffer)))))
               (old-point (point)))
	   (rename-file (buffer-file-name (current-buffer))
			filename)
	   (kill-buffer nil)
	   (find-file filename)
	   (set-window-point (selected-window) old-point)))))
#+end_src

* LaTeX

Except: auto-completion in Auctex is turned on elsewhere.

Remember: when editing tables, use ~M-x align-current~.

Good reading:

+ http://tex.stackexchange.com/questions/50827/a-simpletons-guide-to-tex-workflow-with-emacs/50919#50919
+ http://tex.stackexchange.com/questions/52179/what-is-your-favorite-emacs-and-or-auctex-command-trick

#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook #'outline-minor-mode)
#+end_src

[[https://www.gnu.org/software/auctex/][Auctex]] is amazingly powerful.

#+begin_src emacs-lisp
(use-package auctex
  :defer t
  :diminish auctex
  )
#+end_src

Always use visual-line-mode.

#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-visual-line-mode)
#+end_src

Turn on spell-checking.

#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
#+end_src

Use =pdflatex= to make PDFs.

#+begin_src emacs-lisp
(setq latex-run-command "pdflatex")
;; Use pdflatex to make PDFs
;; For some reason this value isn't respected and I had to set
;; it through Custom. Don't know why.
;; TEMP
(setq TeX-PDF-mode t)
; (customize-set-variable 'org-latex-pdf-process '("latexmk -f -pdf -%latex -interaction=nonstopmode -output-directory=%o %f"))
#+end_src

If a buffer is showing a PDF and the PDF is regenerated, I don't want to be asked if the buffer should revert.  (If I ever want to treat another file type this way, I'll need to append to the list, I guess.)

#+begin_src emacs-lisp
(setq revert-without-query '(".pdf"))
#+end_src

Bibliographies.

#+begin_src emacs-lisp
(setq biblatex-dialect "biblatex")
#+end_src

Automatically activate TeX-fold-mode.  ~C-c C-o C-b~ is necessary to hide everything (or see LaTeX | Show/Hide)

#+begin_src emacs-lisp
(add-hook 'TeX-mode-hook (lambda () (TeX-fold-mode 1)))
#+end_src

Use =wrap-region=.

#+begin_src emacs-lisp
(add-hook 'latex-mode-hook 'wrap-region-mode)
#+end_src

Indent lists by 2 (default is -2).

#+begin_src emacs-lisp
(setq LaTeX-item-indent 0)
#+end_src

Let me do some narrowing in LaTeX documents ... but narrow-or-widen-dwim (~C-x w~) doesn't focus on a section or subsection?!

#+begin_src emacs-lisp
(put 'LaTeX-narrow-to-environment 'disabled nil)
(put 'TeX-narrow-to-group 'disabled nil)
#+end_src

RefTeX.

#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
(eval-after-load "reftex" '(diminish 'reftex-mode))
(setq reftex-bibliography-commands '("bibliography" "nobibliography" "addbibresource"))
#+end_src

From [[http://tex.stackexchange.com/questions/50827/a-simpletons-guide-to-tex-workflow-with-emacs/50919#50919][Stack Overflow, as usual]].

#+begin_src emacs-lisp
(eval-after-load 'reftex-vars
  '(progn
     ;; (also some other reftex-related customizations)
     (setq reftex-cite-format
           '((?\C-m . "\\cite[]{%l}")
             (?f . "\\footcite[][]{%l}")
             (?t . "\\textcite[]{%l}")
             (?p . "\\parencite[]{%l}")
             (?o . "\\citepr[]{%l}")
             (?n . "\\nocite{%l}")))))
#+end_src

* Polymode (not in use)

[[https://github.com/vspinu/polymode/][Polymode]], for Markdown + R + Yaml etc.

I don't use this right now---it would mess up headers in YAML files---but maybe I'll come back to it.  For now, it's not tangled.

#+begin_src emacs-lisp :tangle no
(use-package polymode)

;; Polymode is nice everywhere, except I do not want it in Org.

(use-package poly-markdown
  :config
  (add-to-list 'auto-mode-alist '("\\.md$" . poly-markdown-mode))
  (setq markdown-hide-urls t)
  (setq markdown-hide-markup t)
  (setq markdown-url-compose-char "⋯")
  (setq markdown-header-scaling t)
  (add-hook 'markdown-mode-hook 'turn-on-visual-line-mode)
  )

(use-package poly-R
  :config
  (add-to-list 'auto-mode-alist '("\\.Rmd$" . poly-markdown+r-mode))
  )

(use-package poly-noweb)
#+end_src

* Esonify (not in use)

[[https://github.com/oflatt/esonify][Esonify]] is "an Emacs extension that sonifies your code."  ~M-x esonify-mode~ to toggle on/off.

#+begin_src emacs-lisp :tangle no
(use-package esonify)
#+end_src
